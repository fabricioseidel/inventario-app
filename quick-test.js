// quick-test.js
// Test r√°pido de funcionalidad usando simulaci√≥n simple

console.log('üß™ INICIANDO PRUEBAS DE FUNCIONALIDAD');
console.log('==========================================');

// Test 1: Verificar estructura de datos de producto
console.log('\nüì¶ TEST 1: Estructura de datos de producto');
const testProduct = {
  barcode: '7894900011517',
  name: 'Producto Test',
  category: 'Pruebas',
  purchasePrice: 100,
  salePrice: 150,
  stock: 10,
  soldByWeight: 0
};

const requiredFields = ['barcode', 'name', 'salePrice'];
let productValid = true;
requiredFields.forEach(field => {
  if (!testProduct[field]) {
    console.log(`‚ùå Campo faltante: ${field}`);
    productValid = false;
  }
});

if (productValid) {
  console.log('‚úÖ Estructura de producto v√°lida');
} else {
  console.log('‚ùå Estructura de producto inv√°lida');
}

// Test 2: Verificar estructura de venta
console.log('\nüí∞ TEST 2: Estructura de datos de venta');
const testSale = {
  items: [
    {
      barcode: testProduct.barcode,
      name: testProduct.name,
      qty: 2,
      unit_price: testProduct.salePrice
    }
  ],
  total: 300,
  paymentMethod: 'efectivo',
  amountPaid: 300,
  change: 0
};

const saleValid = testSale.items.length > 0 && testSale.total > 0 && testSale.paymentMethod;
if (saleValid) {
  console.log('‚úÖ Estructura de venta v√°lida');
} else {
  console.log('‚ùå Estructura de venta inv√°lida');
}

// Test 3: Validar c√°lculos
console.log('\nüßÆ TEST 3: Validaci√≥n de c√°lculos');
const calculatedTotal = testSale.items.reduce((sum, item) => sum + (item.qty * item.unit_price), 0);
const expectedTotal = testSale.total;

if (calculatedTotal === expectedTotal) {
  console.log('‚úÖ C√°lculos de total correctos');
} else {
  console.log(`‚ùå Error en c√°lculos: esperado ${expectedTotal}, calculado ${calculatedTotal}`);
}

// Test 4: Validar m√©todos de pago
console.log('\nüí≥ TEST 4: M√©todos de pago');
const validPaymentMethods = ['efectivo', 'debito', 'credito', 'transferencia'];
const testMethod = testSale.paymentMethod;

if (validPaymentMethods.includes(testMethod)) {
  console.log('‚úÖ M√©todo de pago v√°lido');
} else {
  console.log(`‚ùå M√©todo de pago inv√°lido: ${testMethod}`);
}

// Test 5: Validar formato de c√≥digo de barras
console.log('\nüè∑Ô∏è TEST 5: Formato de c√≥digo de barras');
const barcodePattern = /^\d{8,14}$/; // 8-14 d√≠gitos
const testBarcode = testProduct.barcode;

if (barcodePattern.test(testBarcode)) {
  console.log('‚úÖ Formato de c√≥digo de barras v√°lido');
} else {
  console.log(`‚ùå Formato de c√≥digo de barras inv√°lido: ${testBarcode}`);
}

// Test 6: Validar rangos de precios
console.log('\nüí≤ TEST 6: Validaci√≥n de precios');
const purchasePrice = testProduct.purchasePrice;
const salePrice = testProduct.salePrice;

let priceValid = true;
if (purchasePrice < 0 || salePrice < 0) {
  console.log('‚ùå Precios no pueden ser negativos');
  priceValid = false;
}
if (salePrice < purchasePrice) {
  console.log('‚ö†Ô∏è Precio de venta menor al de compra (p√©rdida)');
}
if (priceValid && salePrice >= 0) {
  console.log('‚úÖ Precios v√°lidos');
}

// Test 7: Validar stock
console.log('\nüì¶ TEST 7: Validaci√≥n de stock');
const stock = testProduct.stock;
if (stock < 0) {
  console.log('‚ùå Stock no puede ser negativo');
} else {
  console.log('‚úÖ Stock v√°lido');
}

console.log('\n==========================================');
console.log('üéâ PRUEBAS B√ÅSICAS COMPLETADAS');
console.log('==========================================');

// Resumen de problemas detectados
const problems = [];

if (!productValid) problems.push('Estructura de producto inv√°lida');
if (!saleValid) problems.push('Estructura de venta inv√°lida');
if (calculatedTotal !== expectedTotal) problems.push('Error en c√°lculos');
if (!validPaymentMethods.includes(testMethod)) problems.push('M√©todo de pago inv√°lido');
if (!barcodePattern.test(testBarcode)) problems.push('C√≥digo de barras inv√°lido');
if (purchasePrice < 0 || salePrice < 0) problems.push('Precios negativos');
if (stock < 0) problems.push('Stock negativo');

if (problems.length === 0) {
  console.log('üéâ TODAS LAS PRUEBAS PASARON - NO SE DETECTARON PROBLEMAS CR√çTICOS');
} else {
  console.log('‚ö†Ô∏è PROBLEMAS DETECTADOS:');
  problems.forEach(problem => console.log(`   ‚Ä¢ ${problem}`));
}

console.log('\nüìù NOTA: Estas son pruebas b√°sicas de l√≥gica y estructura de datos.');
console.log('Para pruebas completas de funcionalidad, ejecuta la app con Expo.');